# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2020-05-25 09:55
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('password', models.CharField(help_text="<a class='btn-link' href='password'>resetpass</a>", max_length=128, verbose_name='password')),
                ('phone', models.BigIntegerField(blank=True, null=True)),
                ('weixin', models.CharField(blank=True, max_length=64, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=True, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('name', models.CharField(max_length=32)),
                ('memo', models.TextField(blank=True, default=None, null=True, verbose_name='\u5907\u6ce8')),
                ('date_joined', models.DateTimeField(auto_now_add=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'account',
                'verbose_name_plural': 'account',
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('interval', models.IntegerField(default=300, verbose_name='shijianjiange')),
                ('recover_notice', models.BooleanField(default=True, verbose_name='guzhanghuifuhoufasongxiaoxi')),
                ('recover_subject', models.CharField(blank=True, max_length=128, null=True)),
                ('recover_message', models.TextField(blank=True, null=True)),
                ('enabled', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ActionOperation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('step', models.SmallIntegerField(default=1, help_text='none', verbose_name='dincigaojing')),
                ('action_type', models.CharField(choices=[('email', 'Email'), ('script', 'Script')], default='email', max_length=32, verbose_name='dongzuoleixing')),
                ('msg_format', models.TextField(default='Host({hostname},{ip}) service({service_name}) has issue,msg:{msg}', verbose_name='xiaoxigeshi')),
                ('notifiers', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='tongzhiduixiang')),
            ],
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.SmallIntegerField(choices=[(0, 'baojingshijian'), (1, 'weihushijian')], default=0)),
                ('log', models.TextField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('ip_addr', models.GenericIPAddressField(unique=True)),
                ('monitored_by', models.CharField(choices=[('agent', 'AGENT'), ('snmp', 'SNMP'), ('wget', 'WGET')], max_length=32, verbose_name='monitor_way')),
                ('host_alive_check_interval', models.IntegerField(default=30, verbose_name='hostalivecheckinterval')),
                ('status_choices', models.IntegerField(choices=[(1, 'Online'), (2, 'Down'), (3, 'Unreachable'), (4, 'Offline'), (5, 'Problem')], default=1, verbose_name='status')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='remarks')),
            ],
        ),
        migrations.CreateModel(
            name='HostGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('memo', models.TextField(blank=True, null=True, verbose_name='remarks')),
            ],
        ),
        migrations.CreateModel(
            name='Maintenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('content', models.TextField(verbose_name='weihuneirong')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('host_groups', models.ManyToManyField(blank=True, to='monitor.HostGroup')),
                ('hosts', models.ManyToManyField(blank=True, to='monitor.Host')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='servicename')),
                ('interval', models.IntegerField(default=60, verbose_name='monitorinterval')),
                ('plugin_name', models.CharField(default='n/a', max_length=64, verbose_name='pluginname')),
                ('has_sub_service', models.BooleanField(default=False, verbose_name='whetherhassubservice')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='remarks')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('key', models.CharField(max_length=64)),
                ('data_type', models.CharField(choices=[('int', 'int'), ('float', 'float'), ('str', 'string')], default='int', max_length=32, verbose_name='datatype')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='remarks')),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='template')),
                ('services', models.ManyToManyField(to='monitor.Service', verbose_name='servicelist')),
            ],
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='trigger')),
                ('severity', models.IntegerField(choices=[(1, 'Info'), (2, 'Warning'), (3, 'Error')], verbose_name='monitorlevel')),
                ('enabled', models.BooleanField(default=True)),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='remarks')),
            ],
        ),
        migrations.CreateModel(
            name='TriggerExpression',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specified_index_key', models.CharField(blank=True, max_length=64, null=True, verbose_name='onlymoniterspecifiedkey')),
                ('operator_type', models.CharField(choices=[('eq', '='), ('lt', '<'), ('gt', '>')], max_length=32, verbose_name='operatortype')),
                ('data_calc_func', models.CharField(choices=[('avg', 'Avg'), ('max', 'Max'), ('hit', 'Hit'), ('last', 'Last')], max_length=32, verbose_name='datadealtype')),
                ('data_calc_args', models.CharField(help_text='ifgt2usercommathefirstistime', max_length=64, verbose_name='funcargs')),
                ('threshold', models.IntegerField(verbose_name='threshold')),
                ('logic_type', models.CharField(blank=True, choices=[('or', 'OR'), ('and', 'AND')], max_length=16, null=True, verbose_name='logicrelationship')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor.Service', verbose_name='relatedservice')),
                ('service_index', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor.ServiceIndex', verbose_name='relatedservicekey')),
                ('trigger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor.Trigger', verbose_name='undertrigger')),
            ],
        ),
        migrations.AddField(
            model_name='template',
            name='triggers',
            field=models.ManyToManyField(blank=True, to='monitor.Trigger', verbose_name='triggerlist'),
        ),
        migrations.AddField(
            model_name='service',
            name='items',
            field=models.ManyToManyField(blank=True, to='monitor.ServiceIndex', verbose_name='itemlist'),
        ),
        migrations.AddField(
            model_name='hostgroup',
            name='templates',
            field=models.ManyToManyField(blank=True, to='monitor.Template'),
        ),
        migrations.AddField(
            model_name='host',
            name='host_groups',
            field=models.ManyToManyField(blank=True, to='monitor.HostGroup'),
        ),
        migrations.AddField(
            model_name='host',
            name='templates',
            field=models.ManyToManyField(blank=True, to='monitor.Template'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor.Host'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='trigger',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitor.Trigger'),
        ),
        migrations.AddField(
            model_name='action',
            name='host_groups',
            field=models.ManyToManyField(blank=True, to='monitor.HostGroup'),
        ),
        migrations.AddField(
            model_name='action',
            name='hosts',
            field=models.ManyToManyField(blank=True, to='monitor.Host'),
        ),
        migrations.AddField(
            model_name='action',
            name='triggers',
            field=models.ManyToManyField(blank=True, help_text='whichtriggerswanttobeacted', to='monitor.Trigger'),
        ),
    ]
